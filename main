#Raw Taxiway v Runway CNN

#import necessary libraries
import tensorflow as tf 
from tensorflow import keras
from keras._tf_keras.keras.preprocessing.image import ImageDataGenerator
from keras import layers, models
import matplotlib.pyplot as plt

#defining the directories 
train_directory = 'directory/training'
validation_directory = 'directory/validation'

#creating image data generators
training_data_generator =  ImageDataGenerator(rescale = 1./255)
validation_data_generator = ImageDataGenerator(rescale = 1./255)

#loading the images from the directories
train_generator = training_data_generator.flow_from_directory(
    train_directory,
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

validation_generator = validation_data_generator.flow_from_directory(
    validation_directory,
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

#building the CNN model
model = models.Sequential() #create a linear stack of layers
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) #add convolutional layer
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten()) #flatten output of layer to 1D array
model.add(layers.Dense(512, activation='relu')) #add dense layer
model.add(layers.Dense(1, activation='sigmoid')) #add output layer

#compiling the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

#training the model
history = model.fit(
    train_generator,
    steps_per_epoch=100, #number of batches to yield from generator before declaring one epoch finished
    epochs=20,
    validation_data=validation_generator,
    validation_steps=50
)

#plotting the training and validation accuracy and loss
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(20)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

# Save the model to directory
model.save('C:/Users/amyba/OneDrive/Desktop/llm/directory/taxiway_runway_classifier.h5')



